pipeline {
    agent any
    stages {
        stage('Build dependencies') {
            steps {
                cleanWs()
                checkout scm
                echo "Building ${env.JOB_NAME}"
                dir('cpp/lib') {
                    sh 'git clone https://github.com/google/googletest.git'
                    sh 'git clone https://github.com/unittest-cpp/unittest-cpp.git'
                    sh 'git clone https://github.com/catchorg/Catch2.git'
                    dir ('Catch2') {
                        sh 'cmake -DCMAKE_INSTALL_PREFIX=./install -Bbuild -H. -DBUILD_TESTING=OFF'
                        sh 'cmake --build build/ --target install'
                    }
                }
            }
        }
        stage('cmake && build') {
            steps {
                dir('cpp') {
                    sh 'cmake -S . -B build'
                    sh 'cmake --build build --target all'
                }
            }
        }
        stage('Run Boost.Test') {
            steps {
                dir('cpp/build/frameworks/boost.test') {
                    sh './Boost.Test --log_format=XML --log_sink=./Boost.Test.xml --log_level=all --report_level=no || true'
                }
            }
        }
        stage('Run Catch2') {
            steps {
                dir('cpp/build/frameworks/catch2') {
                    sh './Catch2Test -s -r junit -o Catch2Test.xml || true'
                }
            }
        }
        stage('Run GoogleTest') {
            steps {
                dir('cpp/build/frameworks/googletest') {
                    sh './GoogleTest --gtest_output=xml:GoogleTest.xml || true'
                }
            }
        }
        stage('Run UnitTest++') {
            steps {
                dir('cpp/build/frameworks/unittest++') {
                    sh './UnitTestPP || true'
                }
            }
        }
    }
    post {
        always{
            xunit (
                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '8') ],
                tools: [
                    BoostTest(pattern: '**/build/frameworks/boost.test/Boost.Test.xml'),
                    GoogleTest(pattern: '**/build/frameworks/googletest/GoogleTest.xml'),
                ]
            )
            junit (
                pattern: '**/build/frameworks/catch2/Catch2Test.xml'
            )
        }
    }
}