pipeline {
    agent any
    stages {
        stage('cmake && build') {
            steps {
                sh 'cd cpp && cmake -S . -B build && cmake --build build --target all'
            }
        }
        stage('Run Boost.Test') {
            steps {
                sh './cpp/build/frameworks/boost.test/Boost.Test --log_format=XML --log_sink=./cpp/build/frameworks/boost.test/Boost.Test.xml --log_level=all --report_level=no --result_code=no'
            }
        }
        post {
            always {
                sh 'echo "Post-build actions"'
                step([
                    $class: 'XUnitBuilder', 
                    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
                    tools: [[$class: 'XUnitDotNetTestType', pattern: './cpp/build/frameworks/boost.test/*.xml']]
                ])
                cleanWs()
            }
        }
        // stage('run Catch2') {
        //     steps {
        //         sh './cpp/build/frameworks/catch2/Catch2Test'
        //     }
        // }
        // stage('run googletest') {
        //     steps {
        //         sh './cpp/build/frameworks/googletest/GoogleTest --gtest_output=xml:./GoogleTest.xml'
        //         junit './cpp/build/frameworks/googletest/GoogleTest.xml'
        //     }
        // }
        // stage('run unittest++') {
        //     steps {
        //         sh './cpp/build/frameworks/unittest++/UnitTestPP'
        //     }
        // }
    }
}